<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.104.2">
    <title>Make a Video - GoNexus</title>
    <link href="/static/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://josephanimate2021.github.io/x2js/xml2json.js"></script>
    <style>
      .bgThumb {
        width: 110px;
        height: 72px;
      }
      .charThumb {
        width: 20px;
        height: 50px;
      }
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }
    </style>

    
    <!-- Custom styles for the studio -->
    <link href="/static/bootstrap/css/studio_html5.css" rel="stylesheet">
    <link href="/ui/css/jquery-ui.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/bootstrap/css/font.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-jgrowl/1.4.8/jquery.jgrowl.min.css" />
  </head>
  <body onload="studioHtml5 = new Studio()">
    <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow" id="header">
      <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6" href="/">
        <img src="/ui/img/logo_better.png" alt="GoNexus"/>
      </a>
      <button class="btn btn-secondary form-control antiDisable disabled" onclick="studioHtml5.peformAction(this)" id="loadImporter">
        <i class="glyphicon glyphicon-cloud-upload"></i>
      </button>
      <button class="btn btn-secondary form-control disabled" onclick="studioHtml5.peformAction(this)" id="loadBackgrounds">
        <i class="glyphicon glyphicon-picture"></i>
      </button>
      <button class="btn btn-secondary form-control disabled" onclick="studioHtml5.peformAction(this)" id="loadCharacters">
        <i class="glyphicon glyphicon-user"></i>
      </button>
      <button class="btn btn-secondary form-control disabled" onclick="studioHtml5.peformAction(this)" id="loadSounds">
        <i class="glyphicon glyphicon-music"></i>
      </button>
      <div class="navbar-nav">
        <div class="nav-item text-nowrap">
          <a class="nav-link px-3" href="#">Sign out</a>
        </div>
      </div>
    </header>
    <input type="file" style="display: none;" id="importerFile" onchange="studioHtml5.loadImporterQuene(this)" multiple/>
    <div style="display: none;">
      <div id="previewPlayer"></div>
      <div id="sceneSettings">
        <h2>Scene Settings</h2>
        <div class="btn-group me-2">
          <button type="button" class="btn btn-sm btn-primary" id="sceneSettingsBtn" onclick="studioHtml5.sceneSettings()">Scene Manager</button>
          <button type="button" class="btn btn-sm btn-primary" id="soundtrackSettingsBtn" onclick="studioHtml5.soundTrackSettingsLoader()">Sound Track Manager</button>
          <button type="button" class="btn btn-sm btn-primary" id="stuffRemoverButton" onclick="studioHtml5.stuffRemover()">Remove Stuff From Scene</button>
        </div>
        <hr>
        <form onsubmit="studioHtml5.updateSceneSettings(this)" id="sceneSettings_form" action="javascript:;"></form>
        <form onsubmit="studioHtml5.removeStuffFromScene(this)" id="stuffRemover_form" action="javascript:;"></form>
        <hr>
        <center><button onclick="studioHtml5.hidePleasewait()">Close</button></center>
      </div>
      <div id="aiVideoGeneration">
        <h2>Generate A Video With AI (<strong>BETA</strong>)</h2>
        <div class="alert alert-warning" role="alert">
          Please note that this feature is currently in beta meaning that things may not work as expected.
          If you run into any issues or bugs while using the feature,
          You are advised to contact our staff on our Discord Server if you run into problems
          and we will fix them to the best of our abilities.
        </div>
        <hr>
        <form onsubmit="studioHtml5.aiVideoGeneration(this, true)" action="javascript:;">
          <label for="aiVideoTitle">Video Title</label>
          <input maxlength="16" class="form-control" id="aiVideoTitle" name="title" type="text" required/><br>
          <label for="aiVideoTitle">AI Model</label>
          <select class="form-control" id="aiModelSelection" name="OpenAIModel"></select>
          <input type="submit" value="Generate Video" class="btn btn-warning"/>
        </form>
        <hr>
        <center><button onclick="studioHtml5.hidePleasewait()">Close</button></center>
      </div>
    </div>
    <div class="container-fluid">
      <div class="row">
        <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
          <div class="position-sticky pt-3 sidebar-sticky container">
            <div id="importer_quene_item_example" style="display: none;">
              <label>File: <select id="fileName" onchange="studioHtml5.changeFiles(this)"></select></label>
              <select name="subtype" required>
                <optgroup data-importType="images" style="display: none;">
                  <option value="prop">Prop</option>
                  <option value="bg">Background</a>
                </optgroup>
                <optgroup data-importType="sounds" style="display: none;">
                  <option value="bgmusic">Music</option>
                  <option value="soundeffect">Sound Effect</option>
                  <option value="voiceover">Voice Over</option>
                </optgroup>
              </select>
              <button class="nav-link btn btn-primary" type="submit">Import Asset</button> 
              <button class="nav-link btn btn-secondary" onclick="studioHtml5.closeQuene()">Close</button>
            </div>
            <ul class="nav flex-column mb-2" id="importer_quene"></ul>
            <div class="row" id="stuff"></div>
          </div>
        </nav>
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">GoNexus HTML5 Studio</h1>
            <div class="btn-toolbar mb-2 mb-md-0">
              <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-success" onclick="studioHtml5.setupMoviePreview()">Preview</button>
                <button type="button" class="btn btn-sm btn-outline-warning" onclick="studioHtml5.saveMovie()">Save</button>
              </div>
              <div id="managerBtn"></div>
              <div class="dropdown" id="themesBtn">
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                  <span class="align-text-bottom"></span>
                  All Themes
                </button>
                <ul class="dropdown-menu" id="themes"></ul>
              </div>
              <div class="dropdown" id="newVideoOptionsBtn" style="display: none;">
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                  <span class="align-text-bottom"></span>
                  New Video Creation Options
                </button>
                <ul class="dropdown-menu">
                  <li>
                    <button class="btn btn-warning" onclick="studioHtml5.aiVideoGeneration()">Generate Video With AI (<strong>BETA</strong>)</button>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <div class="my-4 w-100">
            <p>
              Displaying Scene 
              <a id="currentSceneNum" onclick="studioHtml5.loadScenes()" href="javascript:;"></a>.
            </p>
            <div id="studio_html5"></div>
            <button onclick="studioHtml5.sceneSettings()" class="btn disabled">
              Scene Settings
            </button>
            <button onclick="studioHtml5.addScene(studioHtml5.currentSceneNum + 1)" class="btn disabled">
              Add Scene
            </button>
            <button onclick="studioHtml5.addScene(studioHtml5.movieBase.film.scene.length)" class="btn disabled">
              New Scene
            </button>
          </div>
        </main>
      </div>
    </div>
    <script src="/static/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/js/common_combined.js"></script>
    <script src="/js/jquery-ui.js" type="text/javascript"></script>
    <script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/6.2.4/firebase-app.js"></script>
    <script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/6.2.4/firebase-auth.js"></script>
    <script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/init.js"></script>
    <script src="/js/user.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-jgrowl/1.4.8/jquery.jgrowl.min.js"></script>
    <script src="https://malsup.github.io/jquery.blockUI.js"></script>
    <script>
      // functions that can be called from flash objects
      function retrievePreviewPlayerData() {
        return studioHtml5.previewXml;
      }
      // the actual studio
      class Studio {
        constructor() {
          this.showPleasewait();
          this.wideScreen = 0;
          this.previewPlayer = $("#previewPlayer");
          this.managerBtn = '<button type="button" class="btn btn-sm btn-outline-secondary" data-studiohtml5function-call="assetManager">Open Asset Manager</button>';
          this.studio = $("#studio_html5");
          this.x2js = new X2JS();
          this.xmlSerializer = new XMLSerializer();
          this.domParser = new DOMParser();
          this.params = new URLSearchParams(window.location.search);
          let movieBasePath = this.params.get("movieId") ? [
            'get',
            `/movies/${this.params.get("movieId")}.xml`
          ] : [
            'post',
            '/api/templateStuff/get?filename=movieBase.xml&header=Content-Type,text/xml'
          ]
          if (this.params.get("movieBasePath")) movieBasePath = this.params.get("movieBasePath").split("@");
          this.fallbackTheme = "common";
          this.githubBranch = '9c07584ec95b766aea3509ef8d2f81dcc9d86ce2';
          this.githubServerUrl = `https://raw.githubusercontent.com/Wrapper-Offline/Wrapper-Offline/${this.githubBranch}/server`;
          this.storeUrl = `${this.githubServerUrl}/store/3a981f5cb2739137`;
          jQuery.getJSON("/api/themes/get?only_include_extras=true", d => {
            this.extraThemes = d;
          });
          try {
            jQuery[movieBasePath[0]](movieBasePath[1], xmlString => {
              this.movieBase = this.x2js.xml2json(xmlString);
            })
          } catch (e) {
            console.error(e);
            this.displayFeedback(
              `The Error Output is located in the DevTools console if you want to screenshot it (including the error message in this feedback block) in order to send info to our GoNexus devs.`, {
              header: e.toString()
            }, false)
          }
          jQuery.getJSON("/api/themes/get?no_extras=true", d => {
            this.themes = d.filter(i => i.attr.cc_theme_id != undefined).filter(i => i.attr.isHidden != "1");
            $("#themes").html(this.themes.map(v => `<li>
              <button class="dropdown-item" onclick="studioHtml5.themeSelect('${
                v.attr.id
              }')">${v.attr.name}</button>
            </li>`).join(''));
          });
          const interval = setInterval(() => {
            if (
              this.extraThemes 
              && this.themes 
              && this.movieBase
            ) {
              this.movieBase.film.scene = this.movieBase.film.scene || [];
              clearInterval(interval);
              const currentTheme = this.params.get("theme");
              const altTheme = this.themes[0]?.attr.id || "custom";
              const isExtraTheme = this.extraThemes.find(i => i.attr.id == currentTheme);
              const isTheme = this.themes.find(i => i.attr.id == currentTheme);
              this.themeSelect(isExtraTheme || isTheme ? currentTheme : altTheme, "loadBackgrounds", "disabled");
              if (this.params.get("template")) {
                this.template = this.params.get("template");
              }
            }
          }, 1)
        }
        aiVideoGeneration(obj, isFormSubmissionEvent = false) {
          const openAiKey = this.getCookie("OpenAiApiKey");
          if (openAiKey) {
            this.showPleasewait();
            if (isFormSubmissionEvent) jQuery.post("/api/movie/generate", $(obj).serialize(), d => {
              switch (typeof d) {
                case "string": {
                  this.movieBase = this.x2js.xml2json(d);
                  this.displayFeedback(
                    "Your AI Video was generated successfully! Click on the Preview button to see the results.\
                    If the video didn't turn out good as you hoped,\
                    please feel free to either edit this video with the LVM or the HTML5 Studio if you perfer to use it."
                  );
                  break;
                } case "object": {
                  this.displayFeedback(d.feedbackText, d.feedbackData);
                  break;
                }
              }
            });
            else jQuery.post('/api/openai/models/list', d => {
              if (d.error) this.displayFeedback(d.error.message, {
                header: `AI Model Listing Error`
              });
              else {
                function html(v) {
                  return `<option value="${v.id}">${v.id}</option>`
                }
                if (d.object == "list") $("#aiModelSelection").html(d.data.map(html));
                else $("#aiModelSelection").html(html(d.data));
                this.showModal($("#aiVideoGeneration"))
              }
            })
          } else {
            const promptMsg = "OpenAI Api Key (Required For Video Generation)";
            let key = prompt(promptMsg, '');
            if (key && key != null) {
              console.log(key);
              this.setCookie("OpenAIApiKey", key, 132);
              this.aiVideoGeneration();
            } else this.displayFeedback("Please enter in an OpenAI Api Key in order to generate a video");
          }
        }
        deleteScene() {
          this.movieBase.film.scene.splice(this.currentSceneNum, 1);
          if (
            this.selectedBackgrounds && this.selectedBackgrounds[this.currentSceneNum]
          ) this.selectedBackgrounds.splice(this.currentSceneNum, 1);
          this.displayFeedback(`Scene ${this.currentSceneNum + 1} has been deleted successfuly`)
          this.displayScene(0);
        }
        sceneSettings() {
          this.showPleasewait();
          $(`#stuffRemover_form`).html('')
          const sceneInfo = this.movieBase.film.scene[this.currentSceneNum];
          const thingsExcluded = {
            _id: true,
            _index: true,
            _combgId: true,
            _color: true,
            _guid: true
          }
          const info = {};
          for (const i in sceneInfo) {
            if (typeof sceneInfo[i] != "object" && !thingsExcluded[i]) info[i] = sceneInfo[i].toString();
          }
          $(`#sceneSettings_form`).html(`<div id="sceneSettings_manager">
            <h5>Scene Manager</h5>
            ${this.meta2html([info], 'scene', this.currentSceneNum)}
            ${this.movieBase.film.scene.length > 1 ? `<input type="button" onclick="studioHtml5.deleteScene()" class="btn btn-danger" value="Delete Scene"/>` : ''}
          </div><input type="submit" class="btn btn-primary" value="Update Scene Settings"/>`);
          $("#sceneSettings").find("button").prop("disabled", false);
          $("#sceneSettingsBtn")[0].disabled = true;
          this.showModal($("#sceneSettings"));
        }
        stuffRemover(o = {}) {
          const options = this.assignObjects({
            html: '',
            s: 'Stuff'
          }, [o])
          const things2ignore = {
            durationSetting: true,
            effectAsset: true
          }
          this.showPleasewait();
          $("#sceneSettings").find("button").prop("disabled", false);
          $("#stuffRemoverButton")[0].disabled = true
          this.showPleasewait();
          const sceneInfo = this.movieBase.film.scene[this.currentSceneNum];
          let html = options.html;
          if (!html) for (const i in sceneInfo) {
            if (i.startsWith("_") || things2ignore[i]) continue;
            html += `<input type="checkbox" name="${i}"/> ${i}<br>`;
          }
          $("#sceneSettings_form").html('');
          $(`#stuffRemover_form`).html(`<h5>Select The ${options.s} That You Want To Remove From The Scene</h5>
          <input class="btn btn-sm btn-secondary" type="button" onclick="studioHtml5.selectAllCheckboxes($('#stuffRemover_form'), '${options.s}')" value="Select All Items"/><br>
          ${html}
          <input type="submit" class="btn btn-danger" value="Delete The ${options.s}"/>`);
          this.showModal($("#sceneSettings"));
        }
        selectAllCheckboxes(jqueryObject, idc = 'jyvee') {
          this.checkboxToogle = this.checkboxToogle || {};
          this.checkboxToogle[idc] = this.checkboxToogle[idc] || false;
          if (this.checkboxToogle[idc]) this.checkboxToogle[idc] = false;
          else this.checkboxToogle[idc] = true;
          jqueryObject.find('input[type="checkbox"]').prop("checked", this.checkboxToogle[idc])
        }
        removeStuffFromScene(obj) {
          this.showPleasewait();
          const json = Object.fromEntries(new URLSearchParams($(obj).serialize()));
          const keys = Object.keys(json);
          if (!keys[0]) {
            this.displayFeedback("Please select at least one item to remove from the scene.");
            this.showModal($("#sceneSettings"))
          } else if (!json.isDeletingThingsFromScene) {
            for (const key of keys) {
              const sceneInfo = this.movieBase.film.scene[this.currentSceneNum][key];
              console.log(sceneInfo);
              if (Array.isArray(sceneInfo) && sceneInfo.length > 0) {
                let html = `<input type="hidden" name="isDeletingThingsFromScene" value="true"/><input type="hidden" name="assets2remove" value="${key}"/>`;
                for (var i = 0; i < sceneInfo.length; i++) html += `<input type="checkbox" name="${key}[${i}]"/>${key} #${i}<br>`;
                this.stuffRemover({
                  html,
                  s: key
                });
                return;
              } else {
                if (key == "bg") this.studio.html('');
                delete this.movieBase.film.scene[this.currentSceneNum][key];
              }
            }
            this.displayFeedback(`Successfully removed ${keys.join(", ")} from the scene`)
          } else {
            const array = this.stringArray2Array(json).filter(i => i[json.assets2remove] ? true : false);
            if (array) {
              if (
                this.movieBase.film.scene[this.currentSceneNum][json.assets2remove].length == 0
                || array.length == this.movieBase.film.scene[this.currentSceneNum][json.assets2remove].length
              ) delete this.movieBase.film.scene[this.currentSceneNum][json.assets2remove];
              else for (const info of array) {
                for (const i in info) {
                  const key = Object.keys(info[i])[0];
                  this.movieBase.film.scene[this.currentSceneNum][json.assets2remove].splice(key, 1);
                }
              }
              this.displayFeedback(`Successfully removed the selected items from the scene`, {
                header: `${json.assets2remove} deletion message`
              });
            } else {
              this.displayFeedback(`Please select at least 1 ${json.assets2remove} in order to continue with the deletion`);
              this.showModal($("#sceneSettings"));
            }
          }
        }
        meta2html(array, type, num) {
          let soundHyml = '';
          for (var a = 0; a < array.length; a++) {
            const v = array[a];
            function c(I, d = []) {
              console.log(I);
              let html = '';
              for (const key in I) {
                const info = I[key];
                switch (typeof info) {
                  case "object": {
                    html += `<h6>${key}</h6><ul>${c(info, Object.assign([key], d))}</ul>`
                    break;
                  } case "string": {
                    html += `<li class="input-group"><span class="input-group-text">${
                      key.substr(key.startsWith("_") ? 1 : 0)
                    }</span><input class="form-control" type="text" name="${type}[${num || a}]${
                      d.map(v => `[${v}]`).join('')
                    }[${key}]" value="${info}" required/></li>`;
                    break;
                  }
                }
              }
              return html
            }
            soundHyml += `<ul id="setting${a}"${a > 0 ? ' style="display: none;"' : ''}>${c(v)}</ul>`;
          }
          return soundHyml;
        }
        soundTrackSettingsLoader() {
          this.showPleasewait();
          $(`#stuffRemover_form`).html('')
          $("#sceneSettings").find("button").prop("disabled", false)
          $("#soundtrackSettingsBtn")[0].disabled = true;
          let soundHyml = '';
          if (this.movieBase.film.sound && this.movieBase.film.sound[0]) {
            const array = [];
            const excludeThings = {
              sfile: true,
              ttsdata: true,
              _id: true,
              _index: true,
              _track: true,
              _tts: true
            }
            function x(a) {
              const json = {};
              for (const i in a) {
                if (typeof a[i] != "object") json[i] = a[i].toString();
                else {
                  json[i] = json[i] || {};
                  this.assignObjects(json[i], [x(a[i])]);
                }
              }
              return json;
            }
            for (var l = 0; l < this.movieBase.film.sound.length; l++) {
              const info = {};
              const soundInfo = this.movieBase.film.sound[l];
              for (const i in soundInfo) {
                if (excludeThings[i]) continue;
                info[i] = soundInfo[i];
                if (typeof soundInfo[i] != "object") info[i] = soundInfo[i].toString();
                else {
                  info[i] = info[i] || {};
                  this.assignObjects(info[i], [x(soundInfo[i])]);
                }
              }
              array[l] = info;
            }
            console.log(array);
            soundHyml = this.meta2html(array, 'sound');
          }
          else soundHyml = 'There are no soundtracks to manage. Try adding a soundtrack to this movie to see what happens.';
          $(`#sceneSettings_form`).html(`<div id="sceneSettings_soundtracks">
            <h6>Soundtracks Manager (Page <span id="soundtrackPages">${
              (this.slideNum4SoundtrackSettings = this.slideNum4SoundtrackSettings || 0) + 1
            }</span>)</h6>
            <input type="button" style="display: left;" onclick="studioHtml5.soundTrackManagerSlideshowMove('left')" disabled value="<-"/>
            <input type="button" style="display: right;" onclick="studioHtml5.soundTrackManagerSlideshowMove('right')"${
              this.movieBase.film.sound?.length > 1 ? '' : ' disabled'
            } value="->"/>
            ${this.movieBase.film.sound?.length > 0 ? `<input type="button" onclick="studioHtml5.deleteSound(${
              this.slideNum4SoundtrackSettings || 0
            })" class="btn btn-danger" value="Delete Soundtrack"/>` : ''}
            <br>
            ${soundHyml}
          </div>${
            this.movieBase.film.sound?.length > 0 ? `<input type="submit" class="btn btn-primary" value="Update Soundtrack Settings"/>` : ''
          }`);
          this.showModal($('#sceneSettings'), this.movieBase.film.sound?.length > 0 ? {
            css: {
              top: '13%'
            }
          } : {});
        }
        deleteSound(num) {
          this.movieBase.film.sound.splice(num, 1);
          this.soundTrackSettingsLoader();
          this.displayFeedback(`Soundtrack ${num} has been deleted successfully!`, false)
        }
        updateSceneSettings(obj) {
          this.showPleasewait();
          const json = Object.fromEntries(new URLSearchParams($(obj).serialize()));
          this.assignObjects(this.movieBase.film, this.stringArray2Array(json));
          this.displayFeedback("Your Scene Settings were updated successfuly");
        }
        stringArray2Array(json) {
          const a = [];
          for (const key in json) {
            let k = key.split("][").join(".").split("[").join(".").split("]")
            k = k[0].split(".");
            function c(e = 0) {
              if (e == k.length) return json[key];
              const a = {};
              a[k[e]] = c(e + 1);
              return a;
            }
            a.unshift(c())
          }
          return a;
        }
        setCookie(cname, cvalue, exdays) {
          const d = new Date();
          d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
          let expires = "expires="+d.toUTCString();
          document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        }
        getCookie(cname) {
          let name = cname + "=";
          let ca = document.cookie.split(';');
          for(let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
              c = c.substring(1);
            }
            if (c.indexOf(name) == -1) {
              return c.substring(name.length, c.length);
            }
          }
          return "";
        }
        checkCookie(cookie) {
          let user = getCookie(cookie);
          return user != "";
        }
        soundTrackManagerSlideshowMove(c) {
          let expression, conditionals;
          switch (c) {
            case "left": {
              expression = this.slideNum4SoundtrackSettings - 1;
              conditionals = {
                past: this.movieBase.film.sound[expression] ? true : false,
                future: this.movieBase.film.sound[expression - 1] ? true : false
              }
              break;
            } case "right": {
              expression = this.slideNum4SoundtrackSettings + 1;
              conditionals = {
                past: this.movieBase.film.sound[expression] ? true : false,
                future: this.movieBase.film.sound[expression + 1] ? true : false
              }
              break;
            }
          }
          console.log(expression, conditionals);
          $("#sceneSettings_soundtracks").find(`input[style="display: right;"]`)[0].disabled = false;
          $("#sceneSettings_soundtracks").find(`input[style="display: left;"]`)[0].disabled = false;
          if (!conditionals.future) $("#sceneSettings_soundtracks").find(`input[style="display: ${c};"]`)[0].disabled = true;
          if (conditionals.past) {
            $(`#setting${this.slideNum4SoundtrackSettings}`).hide();
            $(`#setting${expression}`).show();
            this.slideNum4SoundtrackSettings = expression;
            $("#sceneSettings_soundtracks").find(`span[id="soundtrackPages"]`).text(expression + 1);
          }
        }
        json2xml(j) {
          return this.xmlSerializer.serializeToString(this.x2js.json2xml(j));
        }
        setupMoviePreview() {
          this.showPleasewait();
          jQuery.post("/api/movie/preview", {
            xml: this.json2xml(this.movieBase)
          }, () => this.initPreviewPlayer({
            flashvars: {
              movieId: "templatePreview",
              userId: userData.uid || userData.id
            }
          }));
        }
        assignObjects(json = {}, array = [], options = {}) {
          const $this = this;
          function c(s) {
            const json = {};
            for (const i in s) {
              if (Array.isArray(s[i]) && !options.noArray) {
                if (json[i] && options.onlyAssignNewArrays) continue; 
                if (!json[i]) json[i] = [];
                Object.assign(json[i], s[i]);
              } else if (typeof s[i] != "object") {
                if (json[i] && options.onlyAssignNewStrings) continue; 
                json[i] = !options.noString ? s[i] : json[i];
              }
              else if (!options.noObject) {
                if (json[i] && options.onlyAssignNewObjects) continue; 
                if (!json[i]) json[i] = {};
                $this.assignObjects(json[i], [c(s[i])]);
              }
            }
            return json;
          }
          for (const j of array) {
            for (const i in j) {
              if (Array.isArray(j[i])) {
                if (json[i] && options.onlyAssignNewArrays) continue; 
                if (!json[i]) json[i] = [];
                Object.assign(json[i], j[i]);
              } else if (typeof j[i] != "object") {
                if (json[i] && options.onlyAssignNewStrings) continue; 
                json[i] = !options.noString ? j[i] : json[i];
              }
              else if (!options.noObject) {
                if (json[i] && options.onlyAssignNewObjects) continue; 
                if (!json[i]) json[i] = {};
                $this.assignObjects(json[i], [c(j[i])])
              }
            }
          }
          console.log(json);
          return json;
        }
        initPreviewPlayer(f = {}) {
          const options = this.assignObjects({
            swf: "/static/animation/player.swf",
            type: "application/x-shockwave-flash",
            width: "550",
            height: "354",
            flashvars: {
              apiserver: "/", 
              autostart: "1", 
              storePath: "/static/store/<store>", 
              clientThemePath: "/static/<client_theme>"
            },
            allowScriptAccess: "always",
            allowFullScreen: "true",
          }, [f])
          this.previewPlayer.flash(options);
          this.previewPlayer.html(`<h2>Preview Video</h2><hr>${
            this.previewPlayer.html()
          }<hr><center><button onclick="studioHtml5.hidePleasewait()">Close</button></center>`)
          this.showModal(this.previewPlayer);
        }
        showModal(m, o = {}) {
          if (!m) return this.displayFeedback(
            "The message paramater is required in the showModal function withn the Studio class in order to display your modal"
          )
          const options = this.assignObjects({
            css: {
              cursor: '',
              right: '66%',
              top: '16%',
              left: '30%',
              width: '558px'
            }, 
            overlayCSS: {
              cursor: ''
            }
          }, [o]);
          options.message = m;
          this.showPleasewait(options);
        }
        changeFiles(obj) {
          this.importerFileNum = $(obj).val();
          this.importerFile = this.files[this.importerFileNum];
        }
        loadImporterQuene(obj) {
          if (!obj.files[0]) return this.displayFeedback("Please select a file to upload", {
            header: "File Upload Notice"
          })
          this.files = obj.files;
          this.importerStarted = true;
          this.loadImporter();
        }
        displayScene(i) {
          this.currentSceneNum = i;
          $("#currentSceneNum").html(this.currentSceneNum + 1);
          if (this.selectedBackgrounds && this.selectedBackgrounds[i]) this.selectBackground(this.selectedBackgrounds[i]);
          else this.studio.html('');
          this.hidePleasewait();
        }
        loadScenes() {
          let html = '';
          if (this.movieBase.film.scene.length > 1) for (var i = 0; i < this.movieBase.film.scene.length; i++) {
            html += `<button class="col-sm btn btn-sm btn-outline-secondary" onclick="studioHtml5.displayScene(${i})">
              Scene ${i + 1}
            </button>`
          } else html = '<div class="col-sm">There are no scenes to load.</div>'
          this.showModal(`<h1>All Scenes</h1><div class="row">${
            html
          }</div><button onclick="studioHtml5.hidePleasewait()">Close</button>`, {
            css: {
              top: '14%'
            }
          });
        }
        assetManager(theme = "ugc") {
          this.soundStop();
          if (typeof theme != "string") theme = $(theme).val();
          this.showPleasewait();
          $("#themesBtn").hide()
          jQuery.post(`/api/assets/get/theme/${theme}`, {
            userId: userData.id || userData.uid
          }, d => {
            this.managerBtn = `<button type="button" class="btn btn-sm btn-outline-secondary" data-studiohtml5function-call="back2Themes">Close Asset Manager</button>`
            this.assetManagerData = this.assetManagerData || {
              init: true
            } 
            this.assetManagerData.array = d
            this.assetManagerData.selectBox = `<select onchange='studioHtml5.assetManager(this)'>
              <option value="ugc">Your Library</option>
              <option value="Comm">Community Library</option>
            </select>`;
            this.changeAction("loadBackgrounds")
            this.hidePleasewait();
          })
        }
        back2Themes() {
          this.showPleasewait();
          $("#themesBtn").show();
          this.managerBtn = `<button type="button" class="btn btn-sm btn-outline-secondary" data-studiohtml5function-call="assetManager">Open Asset Manager</button>`
          delete this.assetManagerData;
          this.changeAction("loadBackgrounds")
          this.hidePleasewait();
        }
        assetManagerContentInsert(content) {
          if (!this.assetManagerData.contentInserted) {
            $("#stuff").html(this.assetManagerData.selectBox + `<div id="assetManagerContent">${content}</div>`)
            this.assetManagerData.contentInserted = true;
          } else $("#assetManagerContent").html(content);
        }
        displayFeedback(text, o = {}, hidePleaseWait = true) {
          if (hidePleaseWait) this.hidePleasewait();
          const options = this.assignObjects({
            life: text.length * text.length
          }, [o]);
          $.jGrowl(text, options);
        }
        closeQuene() {
          $("#importer_quene").find('li[data-type="fileImport"]').remove();
        }
        showPleasewait(j = {}) {
          $("#header").find("button").addClass(this.className)
          jQuery.blockUI(j);
        }
        hidePleasewait() {
          $("#header").find("button").removeClass(this.className);
          this.currentElem.addClass(this.className)
          jQuery.unblockUI();
        }
        themeSelect(newTheme, action, className) {
          this.showPleasewait();
          if (newTheme) this.currentTheme = newTheme;
          this.changeAction(action, className);
          this.swap();
          if (this.studioLoaded) this.hidePleasewait();
        }
        changeAction(action, className, antiDisable) {
          if (action) this.currentAction = action;
          if (className) this.className = className;
          if (!antiDisable) this.currentElem = $(`#${this.currentAction}`);
          this[this.currentAction]();
        }
        swap(oldElem) {
          if (oldElem && oldElem.hasClass(this.className)) oldElem.removeClass(this.className);
          if (!this.currentElem.hasClass(this.className)) this.currentElem.addClass(this.className);
        }
        peformAction(obj) {
          this.soundStop();
          this.showPleasewait();
          const oldElem = this.currentElem;
          this.changeAction($(obj)[0].id, '', $(obj).hasClass("antiDisable"));
          if (!$(obj).hasClass("antiDisable")) this.swap(oldElem);
          this.hidePleasewait();
        }
        loadImporter(importType, importerLoaded = false) {
          if (!this.importerStarted) return document.getElementById("importerFile").click();
          if (!importerLoaded && (this.files || []).length > 0) {
            const supportedFiles = {
              "images": [
                "gif",
                "png",
                "jpg"
              ],
              "sounds": [
                "mp3",
                "ogg",
                "wav",
                "asf"
              ]
            }
            for (var i = 0; i < this.files.length; i++) $("#fileName").append(`<option value="${i}">${this.files[i].name}</option>`)
            this.importerFileNum = 0;
            this.importerFile = this.files[this.importerFileNum];
            for (const i in supportedFiles) {
              for (const fileType of supportedFiles[i]) {
                if (!this.importerFile.name.endsWith(fileType)) continue;
                return this.loadImporter(i, true)
              }
            }
            delete this.importerStarted;
            const old = this.importerFile;
            delete this.importerFile;
            delete this.importerFileNum
            return this.displayFeedback(`Your file with the ${old.name.substr(
              old.name.lastIndexOf(".")
            )} extension is not supported.`, {
              header: 'File Incompatibility Warning'
            })
          }
          if (!this.importerHTML) {
            this.importerHTML = `<li class="nav-item" data-type="fileImport">
              <form action="javascript:;" onsubmit="studioHtml5.uploadFile(this);">
                ${$("#importer_quene_item_example").html()}
              </form>
            </li>`;
            if (importType) setTimeout(() => {
              this.importType = importType;
              this.fileImportElem = $("#importer_quene").find('li[data-type="fileImport"]');
              const optgroup = this.fileImportElem.find(`optgroup[data-importType="${this.importType}"]`);
              optgroup[0].label = 'Import File As...';
              optgroup.show();
              this.importerHTML = `<li class="nav-item" data-type="fileImport">${this.fileImportElem.html()}</li>`
            }, 1)
          }
          $("#importer_quene").html(this.importerHTML);
        }
        uploadFile(obj) {
          this.showPleasewait();
          const data = new FormData();
          data.append("file", this.importerFile);
          const json = Object.fromEntries(new URLSearchParams($(obj).serialize()));
          for (const i in json) data.append(i, json[i]);
          $.ajax({
            url: "/ajax/saveUserProp",
            method: "POST",
            data,
            processData: false,
            contentType: false,
            dataType: "json"
          }).done((d) => {
            if (d.suc) {
              delete this.importerFile;
              delete this.importerHTML;
              delete this.fileImportElem;
              delete this.importType;
              this.closeQuene();
              $("#fileName").html('');
              const array = [];
              for (var i = 0; i < this.files.length; i++) {
                if (i == this.importerFileNum) continue;
                array.unshift(this.files[i]);
              }
              delete this.importerFileNum
              this.files = array;
              if (this.files.length == 0) {
                delete this.files;
                delete this.importerStarted;
              }
              this.displayFeedback("Your asset has been imported successfuly.");
            } else this.displayFeedback(d.msg)
          });
        }
        loadCharacters() {
          if (this.assetManagerData?.init) this.assetManagerContentInsert(
            this.assetManagerData.array.filter(i => i.type == "char").map(v => `<div class="col-sm">
              <button class="nav-link" onclick='studioHtml5.selectCharacter(${JSON.stringify(v)})' title="${v.title}">
                <img src="/char_thumbs/${v.id}.png" alt="${v.title}" class="charThumb"/>
              </button>
            </div>`).join('')
          );
          else jQuery.post(`/api/assets/get/theme/ugc`, {
            userId: userData.uid || userData.id,
            type: "char",
            themeId: this.themes.find(i => i.attr.id == this.currentTheme).attr.cc_theme_id
          }, d => {
            $("#stuff").html(d.map(v => `<div class="col-sm">
              <button class="nav-link" onclick='studioHtml5.selectCharacter(${JSON.stringify(v)})' title="${v.title}">
                <img src="/char_thumbs/${v.id}.png" alt="${v.title}" class="charThumb"/>
              </button>
            </div>`).join(''));
          })
        }
        loadBackgrounds() {
          $("#managerBtn").html(this.managerBtn);
          this.managerBtnElem = $("#managerBtn").find("button");
          this.managerBtnElem.on("click", () => {
            this.managerBtnElem.off("click");
            this[this.managerBtnElem.data("studiohtml5function-call")]();
          })
          if (this.assetManagerData?.init) this.assetManagerContentInsert(
            this.assetManagerData.array.filter(i => i.type == "bg").map(v => `<div class="col-sm">
              <button class="nav-link" onclick='studioHtml5.selectBackground(${JSON.stringify(v)})' title="${v.title}">
                <img src="/goapi/getAsset/${v.id}" alt="${
                  v.title
                }" class="bgThumb"/>
              </button>
            </div>`).join('')
          );
          else jQuery.getJSON(`/api/theme/get?tId=${this.currentTheme}&tag=compositebg`, d => {
            $("#stuff").html(d.map(v => `<div class="col-sm">
              <button class="nav-link" onclick='studioHtml5.selectBackground(${JSON.stringify(v)})' title="${v.attr.name}">
                <img src="${this.storeUrl}/${this.currentTheme}/bg/${v.attr.thumb}" alt="${
                  v.attr.name
                }" class="bgThumb"/>
              </button>
            </div>`).join(''));
            if (!this.studioLoaded) {
              this.addScene(0);
              $("button.disabled").each((index, elem) => {
                if (!$(elem).hasClass("form-control")) $(elem).removeClass("disabled").addClass("btn-outline-secondary");
              })
              if (this.params.get("movieId") || this.params.get("movieBasePath")) {
                if (this.movieBase.film.scene[0].bg) this.selectBackground(d.find(i => i.attr.id == this.movieBase.film.scene[0].bg._id));
              } else {
                $("#newVideoOptionsBtn").show();
                this.selectBackground(d.find(i => i.attr.default == "Y"));
              }
              this.studioLoaded = true;
              this.hidePleasewait();
            }
          })
        }
        addScene(num) {
          if (num == 100) return this.displayFeedback("You cannot add more than 100 scenes.", {
            header: "Note"
          })
          $("#currentSceneNum").html((this.currentSceneNum = num) + 1);
          if (
            this.selectedBackgrounds && this.selectedBackgrounds[this.currentSceneNum - 1]
          ) this.selectedBackgrounds[this.currentSceneNum] = this.selectedBackgrounds[this.currentSceneNum - 1];
          const durDefault = 2.5;
          this.movieBase.film._duration = this.movieBase.film._duration ? this.movieBase.film._duration + durDefault : durDefault;
          const prevInfo = this.movieBase.film.scene[this.currentSceneNum - 1];
          const input2newScene = {
            _index: Number(prevInfo?._index || -1) + 1
          };
          input2newScene._id = `SCENE${input2newScene._index}`
          const sceneInfo = Object.assign({
            _adelay: 60,
            _lock: "N",
            _color: "16777215"
          }, input2newScene);
          if (this.params.get("movieId") && !this.studioLoaded) {
            this.movieBase.film.scene[this.currentSceneNum] = this.movieBase.film.scene[this.currentSceneNum] || sceneInfo;
          } else {
            this.movieBase.film.scene.splice(this.currentSceneNum, 0, sceneInfo);
            for (var i = this.currentSceneNum + 1; i < this.movieBase.film.scene.length; i++) {
              const info = this.movieBase.film.scene[i];
              const input2newScene = {
                _index: Number(info._index) + 1
              };
              input2newScene._id = `SCENE${input2newScene._index}`
              this.assignObjects(this.movieBase.film.scene[i], [input2newScene]);
            }
          }
        }
        selectBackground(info) {
          this.selectedBackgrounds = this.selectedBackgrounds || [];
          this.selectedBackgrounds[this.currentSceneNum] = info;
          if (!this.assetManagerData?.init) {
            if (this.movieBase.film.scene[this.currentSceneNum].prop) delete this.movieBase.film.scene[this.currentSceneNum].prop
            this.movieBase.film.scene[this.currentSceneNum]._combgId = `${this.currentTheme}.${info.attr.id}`
            this.movieBase.film.scene[this.currentSceneNum].bg = {
              _id: info.children.find(i => i.name == "bg").attr.id,
              _index: 0,
              file: info.children.find(i => i.name == "bg").children.find(i => i.name == "file").val
            }
            if (info.children.filter(i => i.name == "prop")[0]) this.movieBase.film.scene[this.currentSceneNum].prop = [];
            for (var c = info.children.filter(i => i.name == "prop").length - 1; c >= 0; c--) {
              const i = info.children.filter(i => i.name == "prop")[c];
              this.movieBase.film.scene[this.currentSceneNum].prop = this.movieBase.film.scene[
                this.currentSceneNum
              ].prop || [];
              this.movieBase.film.scene[this.currentSceneNum].prop[c] = {
                _id: i.attr.id,
                _index: i.attr.index,
                _attached: "Y"
              };
              for (const info of i.children) {
                if (!info.name) continue;
                this.movieBase.film.scene[this.currentSceneNum].prop[c][info.name] = info.val;
              }
            }
          } else {
            delete this.movieBase.film.scene[this.currentSceneNum].prop
            this.movieBase.film.scene[this.currentSceneNum].bg = {
              _id: `BG0`,
              _index: 0,
              file: `ugc.${info.id}`
            }
          }
          const imgUrl = !this.assetManagerData?.init ? `${this.storeUrl}/${this.currentTheme}/bg/${
            info.attr.thumb
          }` :  `/goapi/getAsset/${info.id}`;
          this.studio.html(`<img src="${imgUrl}" height="354" width="550"/>`)
        }
        soundPreview(obj, id) {
          if (id == this.audioId) {
            this.audioPlaying ? this.soundPause() : this.soundContinue();
            return;
          }
          this.audioId = id;
          if (this.audioElem) this.soundPause();
          this.audioElem = $(obj);
          this.audio = new Audio(this.audioElem[0].id);
          this.soundContinue();
          const interval = setInterval(() => {
            if (this.audio.ended) {
              this.soundPause();
              this.audio.load();
              clearInterval();
            }
          }, 1);
        }
        soundContinue() {
          this.audio.play();
          this.audioPlaying = true;
          this.audioElem.html('<i class="glyphicon glyphicon-stop"></i>');
        }
        soundPause() {
          this.audio.pause();
          this.audioElem.html('<i class="glyphicon glyphicon-play"></i>');
          this.audioPlaying = false;
        }
        soundStop() {
          if (this.audio) {
            this.soundPause();
            delete this.audioId;
          }
        }
        loadSound(info, obj) {
          this.showPleasewait();
          this.movieBase.film.sound = this.movieBase.film.sound?.reverse() || [];
          const l = this.movieBase.film.sound.length;
          const infoPrev = this.movieBase.film.sound[l - 1];
          const start = (infoPrev?.stop || 0) + 1; 
          jQuery.post(`/api/retreiveMp3DurationFromURL?url=${this.storeUrl}/${$(obj).data("theme")}/sound/${info.attr.id}`, d => {
            const split = d.d.toString().split(".");
            // the math for stop isn't quite accurate, but i was somewhat able to get it close.
            let stop = Math.round(((Math.round(d.lvmDur * 132) / 666) / 8.1 - 7) - 8) + start;
            if (stop.toString().startsWith("-")) stop = Number(stop.toString().substr(1));
            this.movieBase.film.sound.unshift({
              _id: `SOUND${l + l}`,
              _index: l,
              _track: 0, 
              _vol: 1,
              _tts: 0,
              sfile: `${$(obj).data("theme")}.${info.attr.id}`,
              start,
              stop,
              fadein: {
                _duration: 0,
                _vol: 0
              },
              fadeout: {
                _duration: 0,
                _vol: 0
              }
            });
            this.displayFeedback("Your soundtrack has been added successfully!");
          })
        }
        loadSounds(thisTheme) {
          if (this.assetManagerData?.init) {
            const d = this.assetManagerData.array;
            this.assetManagerContentInsert(d.filter(i => i.type == "sound").map(v => `<div>
              <p class="nav-link">
                <a href="javascript:;" onclick='studioHtml5.loadSound(${JSON.stringify(v)})' title="${v.title}">${v.title} (${v.subtype})</a>
                <a href="javascript:;" onclick="studioHtml5.soundPreview(this, '${v.id}')" id="/goapi/getAsset/${v.id}">
                  <i class="glyphicon glyphicon-play"></i>
                </a>
              </p>
            </div>`).join(''));
          } else {
            const theme = thisTheme || this.currentTheme
            jQuery.getJSON(`/api/theme/get?tId=${theme}&tag=sound`, d => {
              if (d[0]) $("#stuff").html(d.filter(i => i.attr.id.endsWith(".mp3")).map(v => `<div>
                <p class="nav-link">
                  <a href="javascript:;" onclick='studioHtml5.loadSound(${JSON.stringify(v)}, this)' data-theme="${theme}" title="${v.attr.name}">${v.attr.name}</a>
                  <a href="javascript:;" onclick="studioHtml5.soundPreview(
                    this, '${v.attr.id}'
                  )" id="${this.storeUrl}/${theme}/sound/${v.attr.id}">
                    <i class="glyphicon glyphicon-play"></i>
                  </a>
                </p>
              </div>`).join(''));
              else this.loadSounds(this.fallbackTheme)
            });
          }
        }
      }
    </script>
  </body>
</html>