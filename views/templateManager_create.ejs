
<!DOCTYPE html>
<html lang="en">
<head>

<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<link rel="dns-prefetch" href="//web.archive.org/web/20160913102301/https://d2qrjeyl4jwu9j.cloudfront.net/">

<title>Create a Template - GoNexus</title>

<meta name="viewport" content="width=device-width, initial-scale=1">

<meta name="description" content="GoAnimate for Schools is a safe environment for students to fully express their creativity through video and a great place for educators to share educational videos with other educators worldwide.">

<meta property="og:site_name" content="GoAnimate for Schools">
<meta property="fb:app_id" content="122508887813978">
<meta name="google-site-verification" content="Vta3YTpj6Kx6u4p-EzeMArY0alNItkyUYYMvNM8seVI"/>

<style>
    @font-face {
        font-family: 'Lato';
        font-style: normal;
        font-weight: 400;
        src: local('Lato Regular'), local('Lato-Regular'), url(/ui/fonts/qIIYRU-oROkIk8vfvxw6QvesZW2xOQ-xsNqO47m55DA.woff) format('woff');
    }
    @font-face {
        font-family: 'Lato';
        font-style: normal;
        font-weight: 700;
        src: local('Lato Bold'), local('Lato-Bold'), url(/ui/fonts/qdgUG4U09HnJwhYI-uK18wLUuEpTyoUstqEm5AMlJo4.woff) format('woff');
    }
</style>
<link rel="stylesheet" href="/ui/css/common_combined.css">

<link rel="stylesheet" href="/lvm_files/school/css/public/order.css.gz.css">

<script>
var srv_tz_os = -4, view_name = "school", user_cookie_name = "u_info_school";
var user_country = "US";
</script>

<!--[if lt IE 9]>
<script src="https://d2qrjeyl4jwu9j.cloudfront.net/static/c5bab4fb87fee33e/go/js/lib/html5shiv.js"></script>
<![endif]-->
<script src="/js/common_combined.js"></script>
<script type="text/javascript" src="/static/tommy/2012/go/po/goserver_js-en_US.js"></script>
<script type="text/javascript">
var I18N_LANG = 'en_US';
var GT = new Gettext({'locale_data': json_locale_data});
</script>




</head>
<body class="page-action-public_signup">
<script type="text/javascript">
if (self !== top) jQuery('body').hide();
</script>

<%- include("includes/header.ejs", {isVideoList: false}) %>

<script>

</script>

<div class="container">
    <ol class="breadcrumb">
        <li><a href="/">Home</a></li>
        <li><a href="/templateManager">Template Manager</a></li>
        <li class="active">Create a template</li>
    </ol>
    <hr>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-8 col-lg-8">
            <form class="form-horizontal" id="order-form" action="javascript:;" method="post" novalidate>
                <div class="payment-form-section">
                    <div>
                        <div id="templateFilesDownload"></div>
                        <h3>About Your Template</h3>
                        <button class="btn btn-xs btn-green pull-right" data-toggle="modal" data-target="#templateIdeas" type="button">
                            Template Ideas
                        </button>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Template Name<span class="text-danger">*</span></label>
                            <div class="col-sm-6">
                                <input class="form-control" type="text" name="template_name" value="" maxlength="50" id="templateName">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Custom Characters</label>
                            <div class="col-sm-6" id="template_customChars_enable">
                                <select class="form-control" name="template_customChars_enable" onchange="templateManager.customCharsSetup()">
                                    <option value="0">Disabled</option>
                                    <option value="1">Enabled</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group" title="You may upload your template files using the provided template files that you modified.">
                            <label class="col-sm-3 control-label">Template Files<span class="text-danger">*</span></label>
                            <div class="col-sm-5">
                                <input class="form-control" id="template_files_zip" onchange="templateManager.fileUploaded()" type="file" accept=".zip"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Preferred Template URL<span class="text-danger">*</span></label>
                            <div class="col-sm-9"><script>document.write(`
                                <div class="input-group">
                                    <span class="input-group-addon">${window.location.origin}/quickvideo?theme=</span>
                                    <input class="form-control" type="text" name="template_id" maxlength="25" placeholder="template_id" id="templateTheme">
                                </div>`)</script>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Theme Name For Your Template 
                                <a href="javascript:templateManager.loadThemes()">Reload Themes</a>
                            </label>
                            <div class="col-sm-6">
                                <select class="form-control" name="template_theme" id="themeId" onchange="templateManager.ccThemeIdChange(this)">
                                    <option value="">No Themes Loaded</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Template Intro<span class="text-danger">*</span></label>
                            <div class="col-sm-6">
                                <textarea class="form-control" name="template_intro" id="templateIntro" style="height: 100px;"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">
                                Steps for users to create their own video using your template
                                <span class="text-danger">*</span>
                            </label>
                            <div class="col-sm-6">
                                <textarea class="form-control" name="template_introSteps" id="introSteps" style="height: 100px;"></textarea>
                            </div>
                        </div>
                        <div class="payment-form-section-divider"></div>
                        <div id="customChars_info" style="display: none;">
                            <h3>Custom Character Feature Implmention</h3>
                            <p class="text-muted">
                                This is a section of this form where you can fill out 
                                all of the infomation needed to add a feature where users 
                                can use the characters they created in your template.
                            </p>
                            <div class="form-group">
                                <label for="" class="col-sm-3 control-label">Tags</label>
                                <div class="col-sm-6">
                                    <input class="form-control" type="text" name="template_customChars_tags" id="customCharTags">
                                </div>
                            </div>
                            <input type="hidden" name="template_customChars_cc_theme_id" id="ccThemeId"/>
                            <div class="payment-form-section-divider"></div>
                        </div>
                        <button class="btn btn-xs btn-green pull-right" onclick="templateManager.addScene()" type="button">
                            Add Scene
                        </button>
                        <h3>Your Template Scenes</h3>
                        <p class="text-muted">
                            This section will allow you to add as many scenes as you like into your template. 
                            a movie made in either Nexus or FlashThemes will be required to make your scene functional in your template.
                        </p>
                        <div id="templates"></div>
                        <h3>Your Template Stock Characters</h3>
                        <p class="text-muted">
                            These will be the characters that will be included in your template. 
                            If you like you can also enable the ability for a user to use custom characters. 
                            (Theme ID and tags will be required though)
                        </p>
                        <div id="stockCharacters"></div>
                    </div>
                    <div class="payment-form-section-footer">
                        <div class="row">
                            <div class="col-sm-8 col-sm-offset-2">
                                <p>After pressing the button below, 
                                    your template will be created for the public and everyone will be able to use it 
                                    the second they see the link on the
                                    <a href="/studio">2012 Create Page</a>
                                </p>
                            </div>
                        </div>
                        <button class="btn btn-orange btn-lg" onclick="templateManager.publishTemplate()">Create Template &gt;</button>
                    </div>
                </div>

<button class="btn btn-green btn-lg" onclick="templateManager.initTemplatePreview()">Preview Template &gt;</button>

            </form>
            <br><br>
        </div>

<script>
    class TemplateManager {
        constructor(theme) {
            this.initTemplateTheme = theme;
            this.prepTemplateFilesDownload();
            this.loadThemes();
            this.addScene();
            this.createForm($("#order-form").serialize());
            this.templateEditor = {};
            $.getJSON("/api/getTemplates", d => {
                const templateTheme = this.params(window.location.search).get("theme");
                this.templateEditor.allTemplates = d;
                $("#template_ideas").html(
                    Object.keys(d).filter(i => d[i].themeName).map(v => `<button class="template col-xs-5" id="${
                        v
                    }_template" onclick="templateManager.selectTemplate('${v}')">
                        <input type="radio" name="template" value="${v}"/> ${d[v].title}<br>
                        <img src="/static/qvm/templates/${v}/channel.jpg" style="height: 155px; width: 308px;"/>
                    </button>`)
                );
                if (templateTheme) {
                    this.templateEditor.id = templateTheme;
                    while (this.themes) {
                        this.initTemplateEditor(d[templateTheme]);
                        break;
                    }
                }
            })
        }
        params(d) {
            return new URLSearchParams(d);
        }
        prepTemplateFilesDownload(theme) {
            $("#templateFilesDownload").html(`<h3>
                Get Example Template Files
            </h3>
            <p class="text-muted">This will help you create your template without messing things up.</p>
            <a class="form-control" download="template_files.zip" href="/api/getTemplateFiles?theme=${
                theme || this.initTemplateTheme
            }">Download Files</a>
            <div class="payment-form-section-divider"></div>`);
        }
        selectTemplate(id) {
            $(`#${id}_template`).find(`input[value="${id}"]`).prop("checked", true);
        }
        ccThemeIdChange(obj) {
            const themeInfo = this.themes.find(i => i.attr.id == obj.value);
            $("#ccThemeId").val(themeInfo.attr.cc_theme_id);
            this.loadStockChars(themeInfo.attr.cc_theme_id);
            this.customCharsSetup();
        }
        loadThemes() {
            jQuery.blockUI();
            $.getJSON("/api/themes/get", d => {
                this.themes = d;
                $("#themeId").html(d.filter(i => i.attr.isHidden != "1").filter(i => i.attr.cc_theme_id).map(v => `<option value="${
                    v.attr.id
                }">${v.attr.name}</option>`));
                this.ccThemeIdChange(document.getElementById('themeId'));
            })
        }
        customCharsSetup() {
            this.checkForm();
            if (this.json.template_customChars_enable == "1" && $("#ccThemeId").val()) $("#customChars_info").show();
            else $("#customChars_info").hide();
        }
        addScene() {
            this.sceneArray = this.sceneArray || [];
            this.sceneArray.unshift({
                index: this.sceneArray.length + 1,
                val: Math.random().toString().substr(2)
            });
            this.addSceneHTML();
        }
        randomIntFromInterval(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min)
        }
        addSceneHTML() {
            this.checkForm();
            ((array) => {
                $("#templates").html(array.map(i => `<div id="scene-${i.index}">
                    <h4 class="scene-text">
                        Scene ${i.index} - <button class="btn btn-xs btn-red" onclick="templateManager.removeScene('${i.index}')" type="button">
                            Remove
                        </button>
                    </h4>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Scene Name<span class="text-danger">*</span></label>
                        <div class="col-sm-6">
                            <input class="form-control" type="text" value="${
                                this.sceneConfig ? this.sceneConfig[i.index] ? this.sceneConfig[i.index][`step2title${i.index}`] || "" : "" : ""
                            }" name="step2title${
                                i.index
                            }" maxlength="40" placeholder="Just Browing YouTube" onchange="templateManager.saveConfig(this, 'step2title${
                                i.index
                            }', 'scene-${i.index}')">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Scene Description<span class="text-danger">*</span></label>
                        <div class="col-sm-6">
                            <textarea class="form-control" onchange="templateManager.saveConfig(this, 'step2desc${
                                i.index
                            }', 'scene-${i.index}')" name="step2desc${
                                i.index
                            }" placeholder="2 characters deside to browse youtube when something bad happens. Animate the story!">${
                                this.sceneConfig ? this.sceneConfig[i.index] ? this.sceneConfig[i.index][`step2desc${i.index}`] || "" : "" : ""
                            }</textarea>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Your Movie</label>
                        <div class="col-sm-6">
                            <select class="form-control movie-scene" onchange="templateManager.saveConfig(this, 'step2movie${
                                i.index
                            }', 'scene-${i.index}')" name="step2movie${
                                i.index
                            }">
                                <option value="">You don't have any movies</option>
                            </select>
                        </div>
                    </div>
                    <input type="hidden" name="step2tid${i.index}" value="${i.val}"/>
                    <input type="hidden" name="step2class${i.index}" value="${i.index == 1 ? 'item selected' : 'item'}"/>
                    <div class="payment-form-section-divider"></div>
                </div>`));
                setTimeout(this.loadMovies, 1);
            })(this.sceneArray);
        }
        loadMovies() {
            if (userData) {
                jQuery.blockUI();
                $.getJSON(`/movieList?uid=${userData.uid || userData.id}`, d => {
                    $(".movie-scene").html(d.map(v => `<option value="${v.id}">${v.title}</option>`));
                    jQuery.unblockUI();
                });
            }
        }
        addStockCharsHTML(callback) {
            this.checkForm();
            ((array) => {
                $("#stockCharacters").html(array.map(i => `<div id="char-${i.index}">
                    <img style="float: right;" src="/char_thumbs/${i.val}.png"/>
                    <h4 class="char-text"> 
                        Character ${i.index} - <button class="btn btn-xs btn-red" onclick="templateManager.removeCharacter('${
                            i.index
                        }')" type="button">Remove</button>
                    </h4>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Character Name</label>
                        <div class="col-sm-6">
                            <input class="form-control" type="text" onchange="templateManager.saveConfig(this, 'step3name${
                                i.index
                            }', 'char-${i.val}')" name="step3name${i.index}" value="${
                                this.charConfig ? this.charConfig[i.val] ? this.charConfig[i.val][`step3name${i.index}`] || "" : "" : ""
                            }" maxlength="25" placeholder="Character name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="" class="col-sm-3 control-label">Gender</label>
                        <div class="col-sm-6">
                            <select class="form-control" name="step3gender${i.index}" onchange="templateManager.saveConfig(this, 'step3gender${
                                i.index
                            }', 'char-${i.val}')">
                                <option value=F>Female</option>
                                <option value=M${
                                    this.charConfig ? this.charConfig[i.val] ? this.charConfig[i.val][`step3gender${
                                        i.index
                                    }`] == "M" ? ' selected' : "" : "" : ""
                                }>Male</option>
                            </select>
                        </div>
                    </div>
                    <input type="hidden" name="step3cid${i.index}" value="${i.val}"/>
                    <input type="hidden" name="step3head${i.index}" value="/char_heads/${i.val}.png"/>
                    <input type="hidden" name="step3thumb${i.index}" value="/char_thumbs/${i.val}.png"/>
                    <div class="payment-form-section-divider"></div>
                </div>`).join("") || "There are currently no stock characters to choose from right now. Maybe try selecting a different theme.");
                if (callback) callback();
            })(this.charArray);
        }
        editorMode() {
            this.templateEditor.isEditor = true;
            $("#templateTheme").val(this.templateEditor.id);
        }
        saveConfig(s, i, t) {
            const [type, id] = t.split("-");
            this[`${type}Config`] = this[`${type}Config`] || {};
            this[`${type}Config`][id] = this[`${type}Config`][id] || {};
            this[`${type}Config`][id][i] = s.value;
            console.log(this[`${type}Config`]);
        }
        loadStockChars(tid) {
            $.post(`/api/getLatestPremadeCharIds?ti=${tid}`, array => {
                this.charArray = array;
                this.addStockCharsHTML(jQuery.unblockUI);
            })
        }
        removeScene(num) {
            if (this.sceneArray.length == 1) return displayFeedback("1You cannot remove any more scenes.");
            const oldArray = this.sceneArray;
            const newArray = [];
            this.sceneArray = [];
            for (const stuff of oldArray) {
                if (stuff.index != num) newArray.unshift({
                    val: stuff.val
                });
            }
            for (var i = 0; i < newArray.length; i++) {
                this.sceneArray.unshift({
                    index: i + 1,
                    val: newArray[i].val
                })
            }
            this.addSceneHTML();
        }
        removeCharacter(num) {
            if (this.charArray.length < 3) return displayFeedback("1You cannot remove any more characters.");
            const oldArray = this.charArray;
            const newArray = [];
            this.charArray = [];
            for (const stuff of oldArray) {
                if (stuff.index != num) newArray.unshift({
                    val: stuff.val
                });
            }
            for (var i = 0; i < newArray.length; i++) {
                this.charArray.unshift({
                    index: i + 1,
                    val: newArray[i].val
                })
            }
            this.addStockCharsHTML();
        }
        createForm(form) {
            this.form = form;
            this.json = Object.fromEntries(new URLSearchParams(this.form))
        }
        checkForm() {
            if (this.form != $("#order-form").serialize()) this.createForm($("#order-form").serialize());
        }
        initTemplateCreation() {
            jQuery.extend(this, this.json);
            this.template_uid = userData.id || userData.uid;
            this.template_type = this.templateEditor.isEditor ? "edit" : "new";
            delete this.json;
            delete this.form;
            return new Promise((res, rej) => {
                $.post("/api/initTemplateCreation", this, d => {
                    const json = JSON.parse(d);
                    this.checkForm();
                    if (!json[this.json.template_id]) res(json);
                    else {
                        let b = new FormData();
                        b.append("import", document.getElementById("template_files_zip").files[0]);
                        for (const i in this.json) b.append(i, this.json[i]);
                        $.ajax({
                            url: "/api/uploadTemplateFile",
                            method: "POST",
                            data: b,
                            processData: false,
                            contentType: false,
                            dataType: "json"
                        }).done(d => {
                            d.data = JSON.stringify(json);
                            res(d);
                        });
                    }
                })
            })
        }
        fileUploaded() {
            this.template_files_uploaded = true;
        }
        initTemplatePreview() {
            this.previewJson = this.previewJson || {};
            if (
                this.form == $("#order-form").serialize() 
                && this.previewJson.success
                && !this.template_files_uploaded
            ) return $("#preview-success").modal("show");
            else $("#init-preview").modal("show");
            this.checkForm();
            this.initTemplateCreation().then(json => {
                if (json.message) {
                    $("#init-preview").modal("hide");
                    return displayFeedback(json.message);
                }
                $.post("/api/initTemplatePreview", json, c => {
                    const d = this.previewJson = JSON.parse(c);
                    $("#init-preview").modal("hide");
                    if (d.success) {
                        $("#preview-success").modal("show");
                        this.template_files_uploaded = false;
                    } else displayFeedback(1 + d.msg);
                })
            })
        }
        initTemplateEditor(templateInfo) {
            $("#templateName").val(templateInfo.title);
            if (templateInfo.customChars_info) {
                $("#template_customChars_enable").find(
                    'select[name="template_customChars_enable"]'
                ).find('option[value="1"]').prop("selected", true);
                $("#customCharTags").val(templateInfo.customChars_info.tags)
            }
            $("#themeId").find(`option[value="${
                this.themes.find(i => i.attr.name == templateInfo.themeName).attr.id
            }"]`).prop("selected", true);
            $("#templateIntro").text(templateInfo.intro)
            $("#introSteps").text(templateInfo.intro_steps);
            this.sceneArray = [];
            this.charArray = [];
            this.sceneConfig = {};
            this.charConfig = {};
            for (let i = 0; i < templateInfo.templates.length; i++) {
                const sceneInfo = templateInfo.templates[i];
                const val = Math.random().toString().substr(2);
                const index = i + 1;
                this.sceneConfig[val] = {};
                this.sceneConfig[val][`step2title${index}`] = sceneInfo.title;
                this.sceneConfig[val][`step2desc${index}`] = sceneInfo.desc;
                this.sceneArray.unshift({
                    index,
                    val
                });
            }
            this.addSceneHTML();
            for (let i = 0; i < templateInfo.stockCharacters.length; i++) {
                const charInfo = templateInfo.stockCharacters[i];
                const val = charInfo.cid;
                const index = i + 1;
                this.charConfig[val] = {};
                this.charConfig[val][`step3name${index}`] = charInfo.name;
                this.charConfig[val][`step3gender${index}`] = charInfo.gender;
                this.charArray.unshift({
                    index,
                    val
                });
            }
            this.addStockCharsHTML();
            this.prepTemplateFilesDownload(this.templateEditor.id);
        }
        confirmTemplateSelection() {
            const templateContent = "#templateContent";
            this.templateEditor.ideaSelector = {
                form: $(templateContent).serialize()
            } 
            this.templateEditor.ideaSelector.json = Object.fromEntries(new URLSearchParams(this.templateEditor.ideaSelector.form));
            this.templateEditor.id = this.templateEditor.ideaSelector.json.template;
            $("#err-message").text('');
            location.href = templateContent;
            if (!this.templateEditor.id) return $("#err-message").text("Please select a template")
            $("#templateIdeas").modal("hide");
            this.initTemplateEditor(this.templateEditor.allTemplates[this.templateEditor.id]);
        }
        publishTemplate() {
            this.publishJson = this.publishJson || {};
            if (
                this.form == $("#order-form").serialize() 
                && this.publishJson.success
                && !this.template_files_uploaded
            ) return $("#publish-success").modal("show");
            else $("#order-processing").modal("show");
            this.checkForm();
            this.initTemplateCreation().then(json => {
                if (json.message) {
                    $("#order-processing").modal("hide");
                    return displayFeedback(json.message);
                }
                jQuery.extend(json, this.json);
                $.post("/api/publishTemplate", json, c => {
                    const d = this.publishJson = JSON.parse(c);
                    $("#order-processing").modal("hide");
                    if (d.success) {
                        $("#publish-success").modal("show");
                        this.template_files_uploaded = false;
                    } else displayFeedback(1 + d.msg);
                })
            })
        }
        previewRedirect() {
            window.open(`/quickvideo?theme=${this.json.template_id}&isPreview=true`, '_blank').focus();
            $("#preview-success").modal("hide");
        }
        publishedTemplateRedirdct() {
            window.open(`/quickvideo?theme=${this.json.template_id}`, '_blank').focus();
            $("#publish-success").modal("hide");
        }
    }
    var templateManager = new TemplateManager("everydaylife");
</script>
<script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/6.2.4/firebase-app.js"></script>
<script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/6.2.4/firebase-auth.js"></script>
<script src="https://fireanimate-eb62d.firebaseapp.com/__/firebase/init.js"></script>
<script src="/js/user.js"></script>

        <div class="col-md-4 col-lg-3">
            <div class="case-studies">
                <div class="case">
                    <div class="case-quote">
                        <p>I have created around 2 templates for wrapper classic in the past but one of them was a rushed theme who's name was <a href="/quickvideo?theme=michigan">Michigan</a>. But thanks to this tool, i won't need to modify a qvm html just to make templates ever again and all i need from this is my CSS knowledge. this is going to be the best tool for Nexus in a production state so that users will have the best chance to create their own templates without winning in a contest or sending a request to anyone just to have their template sent out to production. the best part is, i can preview my template before it's available for production. Thanks joseph for working on Nexus on your own for a pretty long time and having the idea to make this tool. you are the best!</p>
                        <div class="case-customer">
                            - <span class="name"><a href="/public_user/wD87hhngLkhZNvtwraYOUEYeWUl2" target="_blank">Itinerary Jyvee</a></span>,<br>Nexus Developer
                        </div>
                    </div>
                </div><!--
                <div class="case">
                    <div class="case-quote">
                        <p>The Common Core State Standards asks students to write arguments and to present their findings. GoAnimate allows students an engaging way to present their findings to the class using technology. Pairing the use of technology and writing in an assignment allows students to be better prepared for both college and career.</p>
                        <div class="case-customer">
                            - <span class="name"><a href="https://web.archive.org/web/20160913102301/http://blog.goanimate4schools.com/9th-graders-argue-that-goanimate-rocks-in-little-rock-ak/" target="_blank">Suzanne Rogers</a></span>,<br>M.Ed, High School Educator
                        </div>
                    </div>
                </div>
                <div class="case">
                    <div class="case-quote">
                        <p>The site’s innovative digital storytelling techniques making animation a breeze and tons of fun – and I look forward to using it more in the years to come.</p>
                        <div class="case-customer">
                            - <span class="name"><a href="https://web.archive.org/web/20160913102301/http://blog.goanimate4schools.com/the-road-to-respect-paved-by-goanimate-for-schools/" target="_blank">James Gorcesky</a></span>,<br>7th &amp; 8th grade Art and Technology Teacher
                        </div>
                    </div>
                </div>-->
            </div>
        </div>
    </div>
</div>
<div class="modal" id="init-preview">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Preparing</h3>
            </div>
            <div class="modal-body">
                <br>
                <p class="text-center h4">Your template is currently being setup for preview. please wait...</p>
                <br>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="templateEditor-init">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Preparing Template</h3>
            </div>
            <div class="modal-body">
                <br>
                <p class="text-center h4">We are currently setting up your template right now. please wait...</p>
                <br>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="publish-success">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Success</h3>
            </div>
            <div class="modal-body">
                <br>
                <p class="text-center h4">
                    Your template has been created and published to Nexus. 
                    <a href="javascript:templateManager.publishedTemplateRedirdct()">Click here</a>
                    to see your template in it's former glory.
                </p>
                <br>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="templateIdeas">
    <div class="modal-dialog modal-lg">
        <form class="modal-content" id="templateContent" action="javascript:;">
            <div class="modal-header">
                <button class="close" type="button" data-dismiss="modal">
                    <span aria-hidden="true">×</span>
                    <span class="sr-only">Close</span>
                </button>
                <h3 class="modal-title">Template Ideas</h3>
            </div>
            <div class="modal-body">
                <p class="text-center h4">
                    When you make something like a video for example, 
                    you may sometimes not have any ideas on how you are going to make a video.
                    Same thing can apply when it comes to making templates which is why we added the Template ideas feature.
                    Below you can see all of the templates to choose from and yes your template id will need to be different so that we don't
                    overlap other templates.
                </p>
                <small id="err-message" class="text-center" style="color: red;"></small>
                <div id="template_ideas" class="row"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="templateManager.confirmTemplateSelection()">
                    Confirm Template Selection
                </button>
            </div>
        </form>
    </div>
</div>
<div class="modal" id="preview-success">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Success</h3>
            </div>
            <div class="modal-body">
                <br>
                <p class="text-center h4">
                    Your template is ready for preview. 
                    <a href="javascript:templateManager.previewRedirect()">Click here</a>
                    to preview your template.
                </p>
                <br>
            </div>
        </div>
    </div>
</div>
<div class="modal order-processing-modal" id="order-processing">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Processing</h3>
            </div>
            <div class="modal-body">
                <br>
                <p class="text-center h4">Your template is being created. please wait...</p>
                <br>
            </div>
        </div>
    </div>
</div>

<%- include("includes/footer.ejs") %>

</body>
</html>